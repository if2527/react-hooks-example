{"version":3,"sources":["context.tsx","components/Post/index.tsx","components/Posts/index.tsx","components/CommentItem/index.tsx","components/CommentsList/index.tsx","App.tsx","serviceWorker.js","index.js"],"names":["Context","React","createContext","clickPost","closeModal","idActivePost","Post","post","active","useContext","classes","push","className","join","onClick","id","title","body","Posts","posts","map","key","CommentItem","comments","comment","name","email","CommentsList","App","useState","setPosts","setIdActivePost","setComments","document","getElementsByTagName","useEffect","a","fetch","postsData","json","console","log","fetchMyAPI","Provider","value","classList","contains","add","then","response","dataComments","remove","style","textAlign","length","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7d0d242b.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Context = React.createContext<{\n  clickPost: (id: number) => void;\n  closeModal: () => void;\n  idActivePost: number | null;\n}>({\n  clickPost: () => {},\n  closeModal: () => {},\n  idActivePost: null,\n});\n","import React, { useContext } from \"react\";\nimport \"./index.css\";\nimport { IPost } from \"../../interfaces\";\nimport { Context } from \"../../context\";\n\ninterface IPostComponent {\n  post: IPost;\n  active: boolean;\n}\n\nexport const Post: React.FC<IPostComponent> = ({ post, active }) => {\n  const { clickPost } = useContext(Context);\n  const classes:string[] = ['post-item'];\n  if (active) {\n    classes.push('active');\n  }\n  return (\n    <li className={classes.join(' ')} onClick={() => clickPost(post.id)}>\n      <h5>{post.title}</h5>\n      <p>{post.body}</p>\n    </li>\n  );\n};\n","import React, { useContext } from \"react\";\nimport { Context } from \"../../context\";\nimport { IPost } from \"../../interfaces\";\nimport { Post } from \"../Post\";\n\ninterface IPostsComponent {\n  posts: IPost[];\n}\n\nexport const Posts: React.FC<IPostsComponent> = ({ posts }) => {\n  const { idActivePost } = useContext(Context);\n\n  return (\n    <>\n      <ol>\n        {posts &&\n          posts.map((post: IPost) => {\n            return (\n              <Post\n                active={post.id === idActivePost}\n                key={post.id}\n                post={post}\n              />\n            );\n          })}\n      </ol>\n    </>\n  );\n};\n","import React from \"react\";\nimport { IComment } from \"../../interfaces\";\nimport './index.css'\n\nexport const CommentItem: React.FC<{ comments: IComment[] }> = ({ comments }) => {\n  return (\n    <ul>\n      {comments &&\n        comments.map((comment) => {\n          return (\n            <li className='comment-item' key={comment.id}>\n              <h3>{comment.name}</h3>\n              <small><i>{comment.email}</i></small>\n              <p>{comment.body}</p>\n            </li>\n          );\n        })}\n    </ul>\n  );\n};\n","import React, { useContext } from \"react\";\nimport { Context } from \"../../context\";\nimport { IComment } from \"../../interfaces\";\nimport { CommentItem } from \"../CommentItem\";\nimport \"./index.css\";\n\nexport const CommentsList: React.FC<{ comments: IComment[] }> = ({ comments }) => {\n  const { closeModal } = useContext(Context);\n  return (\n    <div className=\"modal-wrap\" onClick={() => closeModal()}>\n      <div className=\"modal\">\n        <div className=\"modal-header\">\n          <h2>Comments:</h2>\n          <button className='close' onClick={() => closeModal()}>&times;</button>\n        </div>\n        <div className=\"modal-body\">\n          <CommentItem comments={comments} />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nimport { IComment, IPost } from \"./interfaces\";\nimport { Posts } from \"./components/Posts/index\";\nimport { Context } from \"./context\";\nimport { CommentsList } from \"./components/CommentsList\";\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<IPost[] | any>([]);\n  const [idActivePost, setIdActivePost] = useState<number | null>(null);\n  const [comments, setComments] = useState<IComment[]>([]);\n\n  const body = document.getElementsByTagName(\"body\")[0];\n  useEffect(() => {\n    async function fetchMyAPI() {\n      try {\n        let postsData = await fetch(\n          \"https://jsonplaceholder.typicode.com/posts?_start=1&_limit=10\"\n        );\n        postsData = await postsData.json();\n\n        setPosts(postsData);\n      } catch (e) {\n        console.log('.....', e);\n      }\n    }\n\n    fetchMyAPI();\n  }, []);\n\n  const clickPost = (id: number): void => {\n    if (!body.classList.contains(\"no-scroll\")) {\n      body.classList.add(\"no-scroll\");\n    }\n\n    setIdActivePost(id);\n    fetch(`https://jsonplaceholder.typicode.com/comments?postId=${id}`)\n      .then((response) => response.json())\n      .then((dataComments) => setComments(dataComments));\n  };\n\n  const closeModal = () => {\n    setComments([]);\n    setIdActivePost(null);\n    if (body.classList.contains(\"no-scroll\")) {\n      body.classList.remove(\"no-scroll\");\n    }\n  };\n\n  return (\n    <Context.Provider value={{ clickPost, closeModal, idActivePost }}>\n      <div className=\"wrapper\">\n        <h1 style={{textAlign: 'center'}}>Posts: </h1>\n        {!posts.length ? (\n          <p>You do not have any posts!</p>\n        ) : (\n          <Posts posts={posts} />\n        )}\n        {comments.length > 0 && <CommentsList comments={comments} />}\n      </div>\n    </Context.Provider>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}